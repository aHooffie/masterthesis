game Hanabi

typedef Value = [1, 2, 3, 4, 5]
typedef Colour = [blue, green, red, white, yellow]
typedef location = [bluepile, greenpile, redpile, whitepile, yellowpile, discardpile, drawpile, handA, handB, handC, tablelives, tablehints]

deck allCards = [
	R41 = [red, 4],
	G12 = [green, 1],
	B31 = [blue, 3],
	Y5  = [yellow, 5],
	B32 = [blue, 3],
	W31 = [white, 3],
	Y12 = [yellow, 1],
	W32 = [white, 3],
	Y41 = [yellow, 4],
	Y42 = [yellow, 4],
	Y13 = [yellow, 1],
	B41 = [blue, 4],
	G21 = [green, 2],
	Y31 = [yellow, 3],
	W42 = [white, 4],
	W5  = [white, 5],
	B12 = [blue, 1],
	G5 = [green, 5],
	G13 = [green, 1],
	W13 = [white, 1],
	R12 = [red, 1],
		W21 = [white, 2],
		B13 = [blue, 1],
		G31 = [green, 3],
		W22 = [white, 2],
		G32 = [green, 3],
		G22 = [green, 2],
		R31 = [red, 3],
		B41 = [blue, 4],
	R31 = [red, 3],
	B42 = [blue, 4],
	R13 = [red, 1],
	R32 = [red, 3],
	B5  = [blue, 5],
	R13 = [red, 1],
	Y32 = [yellow, 3]
] drawpile none []

deck yellowPile = 	[] yellowpile 	top everyone [value = 1 higher than current, color = yellow]
deck greenPile = 	[] greenpile 	top everyone [value = 1 higher than current, color = green]
deck redPile = 		[] redpile 		top everyone [value = 1 higher than current, color = red]
deck whitePile = 	[] whitepile 	top everyone [value = 1 higher than current, color = white]	
deck bluePile = 	[] bluepile 	top everyone [value = 1 higher than current, color = blue]
deck discardPile = [] discardpile all everyone []
deck stijn = [B11 = [blue, 1], G42 = [green, 4], W41 = [white, 4], Y11 = [yellow, 1]] handS all hanabi []
deck maria = [G41 = [green, 4], Y21 = [yellow, 2], Y22 = [yellow, 2], W11 = [white, 1]]  handM all hanabi []
deck chelsea = [ G11 = [green, 1], R21 = [red, 2], R41 = [red, 4], R22 = [red, 2]] handC all hanabi []
deck lieuwe = [R5 = [red, 5], B21 = [blue, 2], W12 = [white, 1], B22 = [blue, 2]] handL all hanabi []


team allPlayers = [C, M, S, L]

tokens = [
	lives = [start 3, max 3] tablelives all,
	hints = [start 8, max 8] tablehints all
]

players = [S has stijn, M has maria, C has chelsea, L has lieuwe]

rules = [ scoring = [ each = 1 ] ]

gameflow = [
	turnorder = [C, M, S, L]	
	stage midgame = while lives != 0 do, while allCards != empty do
	turns		
	[1 of [ 
		giveHint [stijn, maria, chelsea, lieuwe] Value and then useToken hints,
			
		moveCard [1 .. 5] from [stijn, maria, chelsea, lieuwe] to [bluePile, yellowPile, whitePile, greenPile, redPile]
		and then takeCard from allCards to [stijn, maria, chelsea, lieuwe],
				
		moveCard [1 .. 5] from [stijn, maria, chelsea, lieuwe] to [discardPile]
		and then takeCard from allCards to [stijn, maria, chelsea, lieuwe]
				and then returnToken hints
	]],
	
	stage endgame = while lives != 0 do, for 1 turns do
	 	turns
		[1 of [ giveHint [stijn, maria, chelsea, lieuwe] Value and then useToken hints,
			
				moveCard [1 .. 5] from [stijn, maria, chelsea, lieuwe] to [bluePile, yellowPile, whitePile, greenPile, redPile],
						
				moveCard [1 .. 5] from [stijn, maria, chelsea, lieuwe] to [discardPile]
				and then returnToken hints
		]],	

	stage calculateScore = dealer [req calculateScore /* allPlayers */ yellowPile greenPile redPile whitePile bluePile]]